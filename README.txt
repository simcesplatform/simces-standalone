# SimCES Simulation Platform, standalone version

SimCES, Simulation Environment of Complex Energy System

Copyright (c) 2022 Tampere University and VTT Technical Research Centre of
Finland. Please see the attached license file.


## SimCES in short

SimCES is a simulation platform for modular development, enabling the
components to execute in any runtime. If desirable, the components can run in
any location and connect over Internet. The platform enables loose coupling
between the components, facilitating development and management.

To reduce the burden of development, the simulation components can run as
Docker containers. Furthermore, there is a component framework for Python to
simplify the implementation of workflows, although any runtime and language
are possible.

Despite "energy" in the name, the core of SimCES platform is domain agnostic.
However, energy is mentioned in the name due to the original motivation of the
platform.

This is the "standalone" version of SimCES. Please read below what this means.


## About this standalone version

This is the standalone version of SimCES platform. This is different from the
basic version of the platform, which is distributed component-by-component and
relies on remote container registries. Instead, this standalone version
provides all of the code in one location. It was created to enable reliable
archiving so that none of the required components can cause conflicts due to
availability or versioning.

This standalone version enables merely a subset of the simulations made with
the platform. This is because it would be impossible to include all of the
simulation components (some of which run on an external platform) along with
all of the data, some of which is cannot be openly distributed. Therefore,
this distribution aims primarily at enabling easy experiments with the
platform rather than exhaustively providing all of the software implemented.

You can find the documentation of the basic version here:
https://simcesplatform.github.io/ . Although this was written for the basic
version, the same design principles apply even in the standalone version.


## System requirements

- Operating system: Linux with a graphical user interface recommended
  - tested with Ubuntu 20.04.3 LTS desktop version
- Platform:
    - Docker (tested with 20.10.12)
    - Docker Compose (tested with 1.29.1)
- Memory: 4 GB or more recommended; depends on the simulation components
- Storage space: 6 GB or more; depends on the simulation components
- Internet connection

The following ports must be free:
- 5672
- 8080
- 8081
- 15672


## Quick instructions for standalone version

### Installation and startup

!!!
When running in Linux, make sure to clone this repository directly into the 
Linux machine! The newline characters generated by Windows would make the 
scripts inoperative!
!!!

Once Docker has been installed, it must be configured to run with root permissions to enable the commands to work. Assuming you run on Linux, please see https://docs.docker.com/engine/install/linux-postinstall/ .

Preparation for the installation:
- (Optional) Update source code for the components from GitHub: source scripts/fetch_code.sh
- (Required) Copy the required platform files to installation directory: source scripts/copy_platform_files.sh

Installing the platform:
- Enter the installation directory: cd platform
- Build and install the core platform: source platform_core_setup.sh
- Build and install the included domain components: source platform_domain_setup.sh
- Run the Energy Community test scenario: source start_simulation.sh simulation_configuration_ec.yml

Please note that following the start command, a component called Platform Manager starts the simulation. Then, Platform Manager will exit (as visible in the console output) although the actual simulation components still run.

The duration of the simulation depends on the performance of your system. To verify finishing, you can use the command below: 

$ docker logs Sim00_simulation-manager

The simulation has finished when:
- either the log ends with "stopping the simulation"
- or the command returns "no such container".

Once the simulation has been run, the containers of the actual simulation components quit. However, the message bus and logging system remain running by default.


### See logged results

The results of simulation are accessed via the log API. Although this was designed for software clients, there is a lightweight user interface (UI) too. To view the output logged from simulation components, do as follows.

1. Resolve and store the relevant simulation ID into a text file. This is a timestamp visible in two places: (1) in the output from Platform Manager after startup and (2) in the metadata accessible at http://localhost:8080/simulations .

2. To access the UI, navigate to http://localhost:8080/ .

3. For example, we want to view the power taken by load 3 during the first round (or epoch) of the simulation. To view a single message from a simulation component with the UI, use the section "Get messages for specific simulation". Before clicking "send query", give the following parameters:

- the earlier resolved simulation ID
- "ResourceState.Load.load_3" as the topic
- "1" as the epoch number

In the resulting JSON message, you can see that the component has taken 0.89 kW of real power from the network.

4. For another example, we want to see the real power of load 3 during the entire simulation. To generate a timeseries from multiple messages, use the section "Get time series for specific simulation". Before clicking "send query", give the following parameters:

- the earlier resolved simulation ID
- "RealPower" as attributes
- "ResourceState.Load.load_3" as the topic
- either JSON or CSV for the format

In the result, you can see the load profile during the simulation: -0.89, -0.75, -0.76, ...

This example is trivial as the simulation only repeats the values defined for each component in the source files. However, the benefits become obvious when more complex components actually provide output from simulations based on real-life systems. Following the initial motivation of SimCES, such a simulation can study, e.g., energy management, state monitoring for the electricity network, or electricity-related congestion management.


### Shutdown

Some containers remain running after the simulation. You can stop the platform by removing all the containers that have a name starting with "SimCES". To find the containers:

$ docker ps -a --filter name=simces

Then, you would stop these one by one. For example:

$ docker container rm -f simces_log_reader

To uninstall, the images are removed with standard Docker commands.
